#include <iostream>
#include <windows.h> 
#include <ConIO.h>;

#include "lab1.h"
#include "lab2.h" 
#include "lab3.h"
#include "lab4.h"
using namespace std;
void gotoxy(int x, int y)
{
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}
void firstPage(){
    system("cls");
    gotoxy(50, 0);
    cout << "Практическая работа №1";
    gotoxy(0, 2);
    cout << "Задание:\n1) Вывести, сколько памяти (в байтах) на вашем компьютере отводится под различные типы данных со спецификаторами и без: int, short int, long int, float, double, long double, char и bool.\n2) Вывести на экран двоичное представление в памяти(все разряды) целого числа.При выводе необходимо визуально обозначить знаковый разряд и значащие разряды отступами или цветом.\n3) Вывести на экран двоичное представление в памяти(все разряды) типа float.При выводе необходимо визуально обозначить знаковый разряд мантиссы, знаковый разряд порядка(если есть), мантиссу и порядок.\n4) Вывести на экран двоичное представление в памяти(все разряды) типа double.При выводе необходимо визуально обозначить знаковый разряд мантиссы, знаковый разряд порядка(если есть), мантиссу и порядок. (*)\n\nВыполнено ИДЗ №4.\n\nОценка: 5";
}
int main() {
    setlocale(0, "");
    system("mode con cols=126 lines=28");
    gotoxy(55, 0);
    cout << "Курсовая работа";
    gotoxy(0, 2);
    cout << "Задание:\nНеобходимо объединить все 4 лабораторные работы в единый проект.\n" << endl;
    cout << "Для перемещения между лабораторными работами используйте стрелочки влево и вправо.\nДля выбора лабораторной работы используйте 'Enter'.\nЧтобы выйти из лабораторной работы в меню используйте 'ESC' или стрелочки влево и вправо." << endl << endl;
    cout << "Выполнил: Ковальчук Илья 2373\n\n";
    system("pause");
    firstPage();
    char ch;
    int pn = 1;
    
    while (true) {
        ch = _getch();
        if (ch == -32) {
            ch = _getch(); // Отлавливаем стрелочки
            if (ch == 75) {
                pn == 1 ? pn = 4 : pn--;
            }
            if (ch == 77) {
                pn == 4 ? pn = 1 : pn++;
            }
            system("cls");
            switch (pn) {
            case 1:
                firstPage();
                break;
            case 2:
                gotoxy(50, 0);
                cout << "Практическая работа №2";
                gotoxy(0, 2);
                cout << "Задание:\n1) Создает целочисленный массив размерности N = 100. Элементы массивы должны принимать случайное значение в диапазоне от -99 до 99.\n2) Отсортировать заданный в пункте 1 массив[…] сортировкой(от меньшего к большему). Определить время, затраченное на сортировку, используя библиотеку chrono.\n3) Найти максимальный и минимальный элемент массива. Подсчитайте время поиска этих элементов в отсортированном массиве и неотсортированном, используя библиотеку chrono.\n4) Выводит среднее значение(если необходимо, число нужно округлить) максимального и минимального значения в отсортированном и неотсортированном. Выводит индексы всех элементов, которые равны этому значению, и их количество. Подсчитайте время поиска.\n5) Выводит количество элементов в отсортированном массиве, которые меньше числа a, которое инициализируется пользователем.\n6) Выводит количество элементов в отсортированном массиве, которые больше числа b, которое инициализируется пользователем.\n7) Выводит информацию о том, есть ли введенное пользователем число в отсортированном массиве. Реализуйте алгоритм бинарного поиска. Сравните скорость его работы с обычным перебором. (*)\n8) Меняет местами элементы массива, индексы которых вводит пользователь.Выведите скорость обмена, используя библиотеку chrono.\n\nВ работе присутствуют все 5 сортировок: Bubble sort, Shaker sort, Comb sort, Insert sort, Quick sort + Merge sort\n\nВыполнено ИДЗ №2.\n\nОценка: 5";
                break;
            case 3:
                gotoxy(50, 0);
                cout << "Практическая работа №3";
                gotoxy(0, 2);
                cout << "Задание:\n1) Используя арифметику указателей, заполняет квадратичную целочисленную матрицу порядка N (6,8,10) случайными числами от 1 до  N*N согласно схемам, приведенным на рисунках. Пользователь должен видеть процесс заполнения квадратичной матрицы.\n2) Получает новую матрицу, из матрицы п. 1, переставляя ее блоки в соответствии со схемами\n3) Используя арифметику указателей, сортирует элементы любой сортировкой.\n4) Уменьшает, увеличивает, умножает или делит все элементы матрицы на введенное пользователем число.\n\nВыполнено ИДЗ №6.\n\nОценка: 4";
                break;
            case 4:
                gotoxy(50, 0);
                cout << "Практическая работа №4";
                gotoxy(0, 2);
                cout << "Задание:\n1) С клавиатуры или с файла (*) (пользователь сам может выбрать способ ввода) вводится последовательность, содержащая от 1 до 50 слов, в каждом из которых от 1 до 10 строчных латинских букв и цифр. Между соседними словами произвольное количество пробелов. За последним символом стоит точка.\n2) Необходимо отредактировать входной текст:\n · удалить лишние пробелы;\n · удалить лишние знаки препинания (под «лишними» подразумевается несколько подряд идущих знаков(обратите внимание, что '...' - корректное использование знака) в тексте);\n · исправить регистр букв, если это требуется(пример некорректного использования регистра букв : пРиМЕр);\n3) Вывести на экран слова последовательности, не содержащие цифр.\nВывести на экран ту же последовательность, заменив во всех словах первую букву соответствующей прописной буквой.\n5) Необходимо найти все подстроки, которую введёт пользователь в имеющейся строке. Реализуйте два алгоритма: Линейный поиск, Бойера-Мура. (*)\n\nОценка: 5";
                break;
            }
        }
        if (ch == 13) {
            system("cls");
            switch (pn) {
            case 1:
                drivercode1();
                drivercode1idz();
                break;
            case 2:
                drivercode2();
                firstPage();
                pn = 1;
                break;
            case 3:
                drivercode3();
                drivercode3idz();
                break;
            case 4:
                drivercode4();
                break;
            };
        }
        if (ch == 27) {
            pn = 1;
            firstPage();
        }
    }
}